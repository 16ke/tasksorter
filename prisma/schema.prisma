generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// This is our main Task model. This is what we're building!
model Task {
  id          String   @id @default(cuid()) // A unique ID for each task
  title       String   // The name of the task (e.g., "Buy milk")
  description String?  // More details about the task (optional)
  status      String   @default("TODO") // Is it TODO, IN_PROGRESS, or DONE?
  priority    String?  // Is it LOW, MEDIUM, or HIGH? (optional)
  dueDate     DateTime? // When is the task due? (optional)
  tags        String?  // A list of tags (e.g., "work, personal, urgent")

  // Connects this Task to the User who owns it
  user   User @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now()) // When the task was created
  updatedAt DateTime @updatedAt // When the task was last updated
}